import java.io.*;

class jinal {
    public static void KMPSearch(String p, String t)
    {
        int M = p.length(), N = t.length();
        int lps[] = new int[M];
        int j = 0,i=0;   // index for p[] and t[]            
        
        findlps(p, M, lps); // preprocessing- lps
        
        while (i < N) {
            if (p.charAt(j) == t.charAt(i)) 
            { j++;  i++;  }
            if (j == M) {
                System.out.println("Found pattern at index " + (i - j));
                j = lps[j - 1];
            }
  
            // mismatch after j matches
            else if (i < N && p.charAt(j) != t.charAt(i)) {
                // Do not match lps[0..lps[j-1]] characters,
                // they will match anyway
                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
        }
    }
  
    public static void findlps(String p, int M, int lps[])
    {
        int len = 0, i = 1; // length of the previous longest prefix suffix
        lps[0] = 0; // lps[0] is always 0
  
        // finding lps[i] ---> i = 1 to M-1
        while (i < M) 
       {
            if (p.charAt(i) == p.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            }
            else // (p[i] != p[len])
            {
                // AAACAAAA and i = 7. The idea is similar to search step.
                if (len != 0) {
                    len = lps[len - 1];
                    // we do not increment i here
                }
                else // if (len == 0)
                {   lps[i] = len;  i++;  }
            }
       }
    }
   public static void main(String args[])
    {
        String t = "ABABDABACDABABCABAB";
        String p = "ABABCABAB";
        KMPSearch(p, t);
    }
}