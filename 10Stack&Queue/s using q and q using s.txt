import java.io.*;
import java.lang.*;
import java.util.*;

class Queue_usingstack{
    Queue<Integer> q1= new LinkedList<>();
    Queue<Integer> q2= new LinkedList<>();
    
    
    public void push(int val) {
    q1.add(val);
  }
  
  public int pop() {
    
    if (q1.isEmpty())
    return -1;
    while(q1.size()>1)
    {
        q2.add(q1.poll());
    }
    int temp=q1.poll();
    Queue<Integer> t=q1;
    q1=q2; q2=t;
    
    return temp;
  }
    
}

class Stack_usingqueue {
  Stack<Integer> s1 = new Stack<>();
  Stack<Integer> s2 = new Stack<>();
  
  public void enqueue(int val) {
    s1.push(val);
  }
  
  public int dequeue() {
    if(!s2.empty()) {
      return s2.pop();
    }
    
    if(s1.empty()) // if dono empty hai
    {
      return -1;
    }
    
    while(!s1.empty()) {
      s2.push(s1.pop());
    }
    
    return s2.pop();
  }
    
}

public class StackApp {

  public static void main(String[] args) {
    Queue_usingstack a = new Queue_usingstack();
    a.push(1);
    a.push(435);
    a.push(5);
    
    System.out.print(a.pop());
  }
}