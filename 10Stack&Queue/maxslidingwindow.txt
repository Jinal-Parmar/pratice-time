public int[] maxSlidingWindow(int[] nums, int k) {

	//brute force T- O(nk) S- O(1)
      
        int [] ans=new int [nums.length-k+1];
        for(int i=0;i<=nums.length-k;i++)
        {
            int max=nums[i];
            for(int j=i;j<i+k;j++)
              max=Math.max(max,nums[j]);  
            ans[i]=max;
        }
        return ans;
    }
   
// PriorityQueue T-O(nlogk) S-O(k)

 public int[] maxSlidingWindow(int[] arr, int k) {
        int[] res = new int[arr.length - k + 1];        
        PriorityQueue<Integer> queue = new PriorityQueue<>(
            Collections.reverseOrder());
        int i = 0,j=0;
        for (; i < k; i++)  queue.add(arr[i]);
        
        res[j++]=queue.peek();
        queue.remove(arr[0]);
        for (; i < arr.length; i++) {
            queue.add(arr[i]);
            res[j++]=queue.peek();
            queue.remove(arr[i - k + 1]);
        }
        return res;
   }

public int[] maxSlidingWindow(int[] nums, int k) {
        int [] ans=new int [nums.length-k+1];
       /*
         next greater  element
         decereasing fashion me store krna hai
         DEque
            
         T- O(N)+o(N) S-o(k)
         a[i]
         remove from deque when 
         out of bound OR less than cur no. ( <a[i])
	*/
        int x=0;
        Deque<Integer> dq=new ArrayDeque<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!dq.isEmpty() && dq.peek()==i-k)
                dq.poll(); // front se remove kiya
            
            while(!dq.isEmpty() && nums[dq.peekLast()]<nums[i]) // if bada no. aya nums me to dq ke prev chote kaam k nai
                dq.pollLast();
            
            dq.offer(i);
            if(i>=k-1) ans[x++]=nums[dq.peek()];  
        } 
        return ans;
    }