import java.io.*;
import java.lang.*;
import java.util.*;

// Stack
// array--
// for (i=0 -> n)
//  for(j=0 ->i/i->0/i->n/n->i) i dependent


// nearest greater to right - next largest element
// 1 3 0 0 1 2 4
// for 3 stack will have--> 0 0 1 2 4 
// so traverse from right to left
// pop untill s.top()>arr[i]
// if stack empty hogya--> -1

// nearest greater to left
// 1  3  2 4
//-1 -1 3 -1
// for(i=0->n) for(j=i-1 ->0)
// for 2 stack will be 3 1
// so traverse from left to right

// nearest smaller to left - next smallest element
// nearest smaller to right

// stock span problem

//maxi area of histogram

// maxi area of rectangle in binary matrix

// rainwater traping 
// no concept of NGL NGR
// as for curh, max from left and max from right me se ayega
// curwater=min(maxl,maxr)-curh
// h    3 0
//       /|
// maxl 3 3
// maxl[0] =h[0]
// maxl[i]= max(maxl[i-1],h[i]) i++;
// h    0 4
//      |\
// maxr 4 4
// maxr[n-1] =h[n-1]
// maxr[i]= max(maxr[i+1],h[i]) i--;

// min Stack

// stack using heap

// the orbrity problem

// longest valid parenthesis

// iterative TOH



class GFG {
	public static void main (String[] args) {
		System.out.println("GfG!");
	}
}