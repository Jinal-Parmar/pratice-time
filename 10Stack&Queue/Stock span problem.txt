// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class gfg
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n =sc.nextInt();
            int a[] = new int[n];
            
            int i = 0;
            for(i = 0; i < n; i++)
              a[i] = sc.nextInt();
              
            int[] s = new Solution().calculateSpan(a, n);
            
            for(i = 0; i < n; i++)
            {
                System.out.print(s[i] + " ");
            }
            
            System.out.println();
        }
    }
    
    
    
}// } Driver Code Ends


class Pair{
    int v,i;
    public Pair(int vv ,int ii)
    { i=ii; v=vv;}
}

class Solution
{
    public static int[] calculateSpan(int arr[], int n)
    {
        // we are finding nearest greater to left
        // as we need to find
        // maximum number of consec smaller/ equal to before it 
        
        ArrayList<Integer> ans= new  ArrayList<>();// index store krenge
        Stack<Pair> s= new Stack<Pair>();
        for(int i=0;i<n;i++)
        {
            if(s.size()==0)
                ans.add(-1);
            else if(s.size()>0 && s.peek().v>arr[i]) 
                ans.add(s.peek().i);
            else if(s.size()>0 && s.peek().v<=arr[i])
                {
                    while(s.size()>0 && s.peek().v<=arr[i]) 
                        s.pop();
                    if(s.size()<=0)     ans.add(-1);
                    else                ans.add(s.peek().i);
                }
                s.push(new Pair(arr[i],i));
        }
        int []x= new int[n];
        for(int i=0;i<n;i++)    x[i]=i-ans.get(i);   
        
        return x;
    }
}