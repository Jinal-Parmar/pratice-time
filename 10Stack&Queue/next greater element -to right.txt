// next greater element
// nearest greater to right

// 1  3  2  4
// 3  4  4 -1

// { Driver Code Starts
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    int n = Integer.parseInt(br.readLine().trim());
		    String inputLine[] = br.readLine().trim().split(" ");
		    long[] arr = new long[n];
		    for(int i=0; i<n; i++)arr[i]=Long.parseLong(inputLine[i]);
		    long[] res = new Solution().nextLargerElement(arr, n);
		    for (int i = 0; i < n; i++) 
		        System.out.print(res[i] + " ");
		    System.out.println();
		}
	}
}



// } Driver Code Ends


class Solution
{
    //Function to find the next greater element for each element of the array.
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        LinkedList<Long> ans= new  LinkedList<>();
        Stack<Long> s= new Stack<>();
        for(int i=n-1;i>=0;i--)
        {
            if(s.size()==0)
                ans.addFirst((long)-1);
            else if(s.size()>0 && s.peek()>arr[i]) 
                ans.addFirst(s.peek());
            else if(s.size()>0 && s.peek()<=arr[i])
                {
                    while(s.size()>0 && s.peek()<=arr[i]) 
                        s.pop();
                    if(s.size()<=0)     ans.addFirst((long)-1);
                    else                ans.addFirst(s.peek());
                }
                s.push(arr[i]);
        }
        long[] x =ans.stream().mapToLong(Long::longValue).toArray();
        return x;
    } 
}


// nearest greater to left

// 1  3  2 4
//-1 -1 3 -1
// for(i=0->n) for(j=i-1 ->0)
// for 2 stack will be 3 1
// so traverse from left to right
// addFirst --> add cozz reverse ki zarorat nai

   public static long[] nextLargerElement(long[] arr, int n)
    { 
        LinkedList<Long> ans= new  LinkedList<>();
        Stack<Long> s= new Stack<>();
        for(int i=0;i<n;i++)
        {
            if(s.size()==0)
                ans.add((long)-1);
            else if(s.size()>0 && s.peek()>arr[i]) 
                ans.add(s.peek());
            else if(s.size()>0 && s.peek()<=arr[i])
                {
                    while(s.size()>0 && s.peek()<=arr[i]) 
                        s.pop();
                    if(s.size()<=0)     ans.add((long)-1);
                    else                ans.add(s.peek());
                }
                s.push(arr[i]);
        }
        long[] x =ans.stream().mapToLong(Long::longValue).toArray();
        return x;
    } 


===================================================
// Nearest Smaller Element (to left)
public class Solution {
    public ArrayList<Integer> prevSmaller(ArrayList<Integer> A) {
        
        //for(i=0->n) for(j=i-1->0)
        // 4, 5, 2, 10, 8
        // for 2 --> stack will have 5 4
        ArrayList<Integer> ans=new ArrayList<>();
        Stack<Integer> s=new Stack();
        
        for(int i=0;i<A.size();i++){
            if(s.size()==0) 
                ans.add(-1);
            else if(s.size()>0 && s.peek()<A.get(i))
                ans.add(s.peek());
            else if(s.size()>0 && s.peek()>=A.get(i))
            {
                while (s.size()>0 && s.peek()>=A.get(i)) 
                    s.pop();
                if(s.size()==0) ans.add(-1);
                else            ans.add(s.peek());
            } 
            s.push(A.get(i));   
        }
        return ans;
    }
}


//// Nearest Smaller Element (to right)

     public ArrayList<Integer> prevSmaller(ArrayList<Integer> A) {
        
        //for(i=0->n) for(j=i+1->n)
        // 4, 5, 2, 10, 8
	// 2  2  -1 8 -1
        // for 2 --> stack will have 10 8
        
	ArrayList<Integer> ans=new ArrayList<>();
        Stack<Integer> s=new Stack();
        
        for(int i=A.size()-1;i>=0;i--){
            if(s.size()==0) 
                ans.add(0,-1);
            else if(s.size()>0 && s.peek()<A.get(i))
                ans.add(0,s.peek());
            else if(s.size()>0 && s.peek()>=A.get(i))
            {
                while (s.size()>0 && s.peek()>=A.get(i)) 
                    s.pop();
                if(s.size()==0) ans.add(0,-1);
                else            ans.add(0,s.peek());
            } 
            s.push(A.get(i));   
        }
        return ans;
    }
