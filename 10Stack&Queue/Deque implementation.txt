import java.io.*;
import java.lang.*;
class Deque
{
  
    
    int  front=-1, rear=0,  size=15;
    int  arr[] = new int[size];
    boolean isFull(){return ((front == 0 && rear == size-1)|| front == rear+1);}
    
    boolean isEmpty (){ return (front == -1);}
    
    void insertfront(int key)
    {
      if (isFull()){ System.out.println("Overflow"); return;}
      if (front == -1) { front =rear = 0;}
      else if (front == 0) front = size - 1 ;
      else front--;
      arr[front] = key ;
    }
    
    void insertrear(int key)
    {
       if (isFull()){ System.out.println("Overflow"); return;}
       if (front == -1) { front =rear = 0;}
       else if (rear == size-1) rear = 0;
       else rear++;
       arr[rear] = key ;
    }
   void deletefront()
    {
        if (isEmpty()){ System.out.println("Queue Underflow\n"); return ;  }
        if (front == rear){ front = -1; rear = -1; }
        else
            if (front == size -1)   front = 0;
            else  front++;
    }
   
    void deleterear()
    {
        if (isEmpty()){ System.out.println("Queue Underflow\n"); return ;  }
        if (front == rear){ front = -1; rear = -1; }
        else if (rear == 0) rear = size-1;
        else rear--;
    }
    int getFront()
    {
        if (isEmpty()){ System.out.println("Queue Underflow\n"); return -1;  }
        return arr[front];
    }
    int getRear()
    {
         if (isEmpty() || rear<0){ System.out.println("Queue Underflow\n"); return -1;  }
         return arr[rear];
    }
   public static void main(String[] args)
    {
          
         Deque dq = new Deque();
         
         dq.insertrear(12);
         dq.insertfront(1);
         dq.deleterear();
         System.out.println(dq.getRear());
         
    }
}