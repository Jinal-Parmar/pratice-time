import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left,right;
    public Node(int d)
    { data=d; left=null; right=null;}
}

class BinaryTree{
    Node root;
    
    public int addall(Node R)
    {
        if(R==null) return 0;
        
        int l=addall(R.left);
        int r=addall(R.right);
        return R.data+l+r;
    }
    public int diffatevenoddlevel(Node R)
    {
        if(R==null) return 0;
        
        int l=diffatevenoddlevel(R.left);
        int r=diffatevenoddlevel(R.right);
        return R.data-l-r;
    }
    public int noofnodes(Node R)
    {
        if(R==null) return 0;
        
        int l=noofnodes(R.left);
        int r=noofnodes(R.right);
        return 1+l+r;
    }
    public int noofleafnodes(Node R)
    {
        if(R==null) return 0;
        
        if(R.left==null && R.right==null)return 1; // when left and right are null
        
        int l=noofleafnodes(R.left);
        int r=noofleafnodes(R.right);
        return l+r;
    }
    public int height(Node R) 
    {
        if(R==null) return 0;
     
        int l=height(R.left);
        int r=height(R.right);
        return 1+Math.max(l,r);
    }
    public void printnodesofanylevel(Node R,int l) 
    {
        if(R==null) return;
         
        if(l==1) {System.out.print(R.data+" "); return;}
        
        printnodesofanylevel(R.left,l-1);
        printnodesofanylevel(R.right,l-1);
    }
    public void levelorderprint(Node R) 
    {
        if(R==null) return;
         
        int h=height(R); 
        for(int i=0;i<h;i++)
        {
           printnodesofanylevel(R,i+1);
           System.out.println();
        } 
    }
    public void levelorderqueue(Node R) 
    {
        Queue<Node>q=new LinkedList<>();
        q.add(R);
        
        while(!q.isEmpty())
        {
            Node  t=q.poll();
            System.out.print(t.data+" ");
            if(t.left!=null)q.add(t.left);
            if(t.right!=null)q.add(t.right);
        }
    }
    public void linebylinelevelorderqueue(Node R) 
    {
        Queue<Node>q=new LinkedList<>();
        q.add(R);
        
        while(!q.isEmpty())
        {
            int s=q.size();
            
            while(s>0)
            { 
                Node  t=q.poll();
                System.out.print(t.data+" ");
                if(t.left!=null)q.add(t.left);
                if(t.right!=null)q.add(t.right);
                s--;  
            }
            System.out.println();
        }
    }
    public void reverselevelorder(Node R) 
    {
        if(R==null) return;
         
        int h=height(R); 
        for(int i=h;i>=0;i--)
        {
           printnodesofanylevel(R,i+1);
           System.out.println();
        } 
    }
    public void reverselevelorderqueue(Node R) 
    {
        if(R==null) return;
        Queue<Node>q=new LinkedList<>(); // right fir left
         //then poll krke add into stack
        Stack<Integer> s=new Stack<>();
        
        q.add(R);
        
        while(!q.isEmpty())
        {
            Node  t=q.poll();
            if(t.right!=null)q.add(t.right);
            if(t.left!=null)q.add(t.left);
            s.push(t.data);
        }
        
        while(!s.isEmpty())
        System.out.print(s.pop()+" ");
    }
    int maxlevel=1;
    public void leftview(Node R,int curlevel) 
    {
        if(R==null) return;
        
        if(curlevel>=maxlevel)
        {
            System.out.print(R.data+" ");
            maxlevel++; //increase only on hitting 1st node of each level
        }
        leftview(R.left,curlevel+1);
        leftview(R.right,curlevel+1);
    }
    public void rightview(Node R,int curlevel) 
    {
        if(R==null) return;
        
        if(curlevel>=maxlevel)
        {
            System.out.print(R.data+" ");
            maxlevel++; //increase only on hitting 1st node of each level
        }
        rightview(R.right,curlevel+1); //sirf right pehle daalo
        rightview(R.left,curlevel+1);
    }
    public void inorderstack(Node R)
    {
        Stack<Node> s=new Stack<>();
        while(R!=null) //push all left first
        {
            s.push(R);
            R=R.left;
        }
        
        while(!s.isEmpty()){
            Node t=s.pop();//pop from stack and print
            System.out.print(t.data+" ");
            if(t.right!=null) //check if right hai to wapis uske sare left daalo
            {
                Node temp=t.right;
                while(temp!=null)
                    {  s.push(temp); 
                       temp=temp.left;
                    }
            }
        }
    }
    public void preorderstack(Node R)
    {
        Stack<Node> s=new Stack<>();
        s.push(R);
        
        while(!s.isEmpty()){
            Node t=s.pop();//pop from stack and print
            System.out.print(t.data+" ");
                             //push right then left as hame left print pehle krna h
            if(t.right!=null){
                s.push(t.right);
            }
            if(t.left!=null){  
                s.push(t.left); 
            }
        }
    }
    public void postorderstack(Node R)
    {
        Stack<Node> s=new Stack<>();
        Stack<Node> op=new Stack<>();
        s.push(R);
        
        while(!s.isEmpty()){
            Node t=s.pop();//pop from stack and add to op stack
                           //push  left then right coz  pop ho k right op stack me jaega
            if(t.left!=null){  
                s.push(t.left); 
            }
            if(t.right!=null){
                s.push(t.right);
            }
            op.push(t);
        }
        while(!op.isEmpty())
        {
            System.out.print(op.pop().data+" ");
        }
        
    }
    public Node binarytomirror(Node R)
    { 
        if(R==null) return null;
        
        Node t=R.left;
        R.left=R.right;
        R.right=t;
        
        binarytomirror(R.left);
        binarytomirror(R.right);
        return R;
    }
    public Node deleteall(Node R)
    { 
        if(R==null) return null;
        deleteall(R.left);
        deleteall(R.right);
        System.out.println("Deleting node:"+R.data);
        R=null;
        return R;
    }
    public boolean checkifidentical(Node R1,Node R2)
    { 
        if(R1==null && R2==null) return true;
        if(R1==null || R2==null) return false;
        
        return (R1.data==R2.data) && checkifidentical(R1.left,R2.left) && checkifidentical(R1.right,R2.right);
    }
    public int getlevelofanynode(Node R,int v,int l) 
    {
        if(R==null) return 0;
         
        if(R.data==v) return l;
        int ans;
        ans=getlevelofanynode(R.left,v,l+1);
        if(ans!=0)  
        return ans;
                    // jabhi 0 ho raha hai wo right check krega
        ans=getlevelofanynode(R.right,v,l+1);
        return ans;
    }
    public void printboundary(Node R)
    {
        // root left leaves then right
        if(R!=null)
        System.out.print(R.data+" ");
        
        printleftwali(R.left);
        printleaves(R.left);
        printleaves(R.right);
        printrightwali(R.right);
    }
    public void printleftwali(Node R)
    {
        if(R==null) return;
        if(R.left!=null)
        {
         System.out.print(R.data+" ");
         printleftwali(R.left);
        }         
        else if(R.right!=null)
        {
         System.out.print(R.data+" ");
         printleftwali(R.right);
        }
    }
    public void printleaves(Node R)
    {
        if(R==null) return;
        printleaves(R.left);
        if(R.left==null && R.right==null)
        {
         System.out.print(R.data+" ");
        }
        printleaves(R.right);
    }
    public void printrightwali(Node R)
    {
        if(R==null) return;
         if(R.right!=null)
        {
         printrightwali(R.right);
         System.out.print(R.data+" ");
        }
        else if(R.left!=null)
        {
         printrightwali(R.left);
         System.out.print(R.data+" ");
        }         
    }
    
    public static void main(String args[])
    {
       
        BinaryTree t = new BinaryTree();
        t.root = new Node(1);
        t.root.left = new Node(2);
        t.root.right = new Node(3);
        t.root.left.left = new Node(4);
        t.root.left.right = new Node(5);
        t.root.right.left = new Node(6);
        t.root.right.right = new Node(7);
 
        Node root2=new Node(1);
        root2.left = new Node(2);
        root2.right = new Node(3);
        root2.left.left = new Node(4);
        root2.left.right = new Node(5);
        root2.right.left = new Node(6);
        root2.right.right = new Node(7);
        
        
        t.printboundary(t.root);
      //System.out.print(t.getlevelofanynode(t.root,3,1));    
      //System.out.print(t.checkifidentical(t.root,root2));
      //t.inorderstack(t.binarytomirror(t.root));
      //System.out.print(t.levelorderprint(t.root));
      //System.out.print(t.deleteall(t.root));
    }
    
}
