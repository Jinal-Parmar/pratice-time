public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // space-O(2N)
	List<List<Integer>> res=new ArrayList();
        if(root==null)return res;
        
        Stack<TreeNode>s1=new Stack<TreeNode>();
        Stack<TreeNode>s2=new Stack<TreeNode>();       
        List<Integer>l=new ArrayList();
        s1.push(root);
    
        while(!s1.isEmpty()|| !s2.isEmpty())
        {
            while(!s1.isEmpty())
            {
                TreeNode t=s1.pop();
                l.add(t.val);
                if(t.left!=null)    s2.push(t.left);
                if(t.right!=null)   s2.push(t.right);
            }
            if(!l.isEmpty())
            res.add(new ArrayList(l));
            l.clear();
           while(!s2.isEmpty())
            {
                TreeNode t=s2.pop();
                l.add(t.val);
                if(t.right!=null) s1.push(t.right);
                if(t.left!=null)  s1.push(t.left);
            }
            if(!l.isEmpty())
            res.add(new ArrayList(l));
            l.clear();
        }
    
     return res;
    }

===============================================================
// space-O(n)
public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        List<List<Integer>> res=new ArrayList();
        if(root==null) return res;
        
        q.offer(root);
        boolean f=true;
        while(!q.isEmpty())
        {
            int l=q.size();
            List<Integer> addme=new ArrayList<>();
            for(int i=0;i<l;i++)
            {
                if(q.peek().left!=null)   q.offer(q.peek().left);
                if(q.peek().right!=null)  q.offer(q.peek().right);
                
                if(f)
                    addme.add(q.poll().val);
                else
                    addme.add(0,q.poll().val);                    
            }
            f=!f; res.add(addme);
            
        }
        return res;
    }