// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GfG { 
    
	public static void main (String[] args) throws IOException  {
	    
	    //reading input using BufferedReader class
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		//reading total testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    
		    //reading number of eggs and floors
		    String inputLine[] = br.readLine().trim().split(" ");
		    
		    int n = Integer.parseInt(inputLine[0]);
		    int k = Integer.parseInt(inputLine[1]);
		    
		    //calling eggDrop() method of class
		    //EggDrop
		    System.out.println(new Solution().eggDrop(n, k));
		}
	}
}


// } Driver Code Ends

// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GfG { 
    
	public static void main (String[] args) throws IOException  {
	    
	    //reading input using BufferedReader class
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		//reading total testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    
		    //reading number of eggs and floors
		    String inputLine[] = br.readLine().trim().split(" ");
		    
		    int n = Integer.parseInt(inputLine[0]);
		    int k = Integer.parseInt(inputLine[1]);
		    
		    //calling eggDrop() method of class
		    //EggDrop
		    System.out.println(new Solution().eggDrop(n, k));
		}
	}
}


// } Driver Code Ends


class Solution 
{
   static int solve(int e, int f)
    {
            if(f==0 || f==1 || e==1) return f;
	    int ans=Integer.MAX_VALUE;
	   
	    for(int k=1;k<=f; k++)
	    {
	        ans= Math.min(ans,1+Math.max(solve(e,f-k), solve(e-1,k-1)));
	                                    // not break so upr jao
	                                    // break hua to nich jao
	                                    // worst case k liye max nikalenge
	    }
	    return ans;
    }
    static int eggDrop(int n, int k) 
	{
	 return solve(n,k);
	}
}
================================================================
class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int t[][]= new int[201][201];
    static int solve(int e, int f)
    {
       	    if(f==0 || f==1 || e==1) return f;
	    int ans=Integer.MAX_VALUE;
	    
	    if(t[e][f]!=-1) return t[e][f];
	    for(int k=1;k<=f; k++)
	    {
	        ans= Math.min(ans,1+Math.max(solve(e,f-k), solve(e-1,k-1)));
	                                    // not break so upr jao
	                                    // break hua to nich jao
	                                    // worst case k liye max nikalenge
	    }
	    return t[e][f]=ans;
    }
    static int eggDrop(int n, int k) 
	{
	 for(int x[]: t) { Arrays.fill(x,-1);} 
	 return solve(n,k);
	}
}
===============================================

class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int t[][]= new int[201][201];
    static int solve(int e, int f)
    {
        if(f==0 || f==1 || e==1) return f;
	    int ans=Integer.MAX_VALUE;
	    if(t[e][f]!=-1) return t[e][f];
	    
	    for(int k=1;k<=f; k++)
	    {
	        int up=-1,down=-1;
	        if(t[e][f-k]!=-1)  up=t[e][f-k];
	        else  	          {up= solve(e,f-k);  t[e][f-k]=up;}
	        
	        if(t[e-1][k-1]!=-1)  down=t[e-1][k-1];
	        else                {down= solve(e-1,k-1); t[e-1][k-1]=down;}
	        
	        ans= Math.min(ans,1+Math.max(up, down));
	                                    // not break so upr jao
	                                    // break hua to nich jao
	                                    // worst case k liye max nikalenge
	    }
	    return t[e][f]=ans;
    }
    static int eggDrop(int n, int k) 
	{
	 for(int x[]: t) { Arrays.fill(x,-1);} 
	 return solve(n,k);
	}
}