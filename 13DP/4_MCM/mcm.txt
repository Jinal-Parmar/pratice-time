// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String input_line[] = in.readLine().trim().split("\\s+");
            int arr[]= new int[N];
            for(int i = 0; i < N; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            System.out.println(ob.matrixMultiplication(N, arr));
        }
    }
}
// } Driver Code Ends


class Solution{
    static int solve(int arr[], int i,int j)
    {
        if(i>=j) return 0; // ek size ka arr bhi nai chalege
        int ans=Integer.MAX_VALUE;
        for(int k=i;k<=j-1;k++)
        {
            int tans= solve(arr,i,k)+ solve(arr,k+1,j)+ arr[i-1]*arr[k]*arr[j];
            ans=Math.min(ans,tans);
        }
        return ans;
    }
    static int matrixMultiplication(int n, int arr[])
    {
       return solve(arr,1,n-1);
    }
}


bottom up
====================================
class Solution{
    static int solve(int arr[], int i,int j,int t[][])
    {
        if(i>=j) return 0; // ek size ka arr bhi nai chalege
        int ans=Integer.MAX_VALUE;
        if(t[i][j]!=-1)    return t[i][j];
        
        for(int k=i;k<=j-1;k++)
        {
            int tans= solve(arr,i,k,t)+ solve(arr,k+1,j,t)+ arr[i-1]*arr[k]*arr[j];
            ans=Math.min(ans,tans);
        }
        return t[i][j]=ans;
    }
    static int matrixMultiplication(int n, int arr[])
    {
        int t[][]= new int[101][101];
        for(int x[]: t)
         Arrays.fill(x,-1);
       return solve(arr,1,n-1,t);
    }
}