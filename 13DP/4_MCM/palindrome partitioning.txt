// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String str = in.readLine();
            Solution ob = new Solution();
            System.out.println(ob.palindromicPartition(str));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution{
    
     static boolean ispalindrome(String s, int i,int j)
     {
         while(i<=j)
         {
             if(s.charAt(i)==s.charAt(j))
              {i++; j--;}
              else return false;
         }
         return true;
     }
    
    static int solve(String s, int i,int j)
    {
        if(i>=j || ispalindrome(s,i,j)) return 0; // ek element hua to bhi parition 0 krne honge
        
        int ans=Integer.MAX_VALUE;
        for(int k=i;k<=j-1;k++)
        {
            int tans= solve(s,i,k)+solve(s,k+1,j)+1;
           ans= Math.min(ans,tans);
        }
     return ans;
    }
    static int palindromicPartition(String s)
    {
        return solve(s,0,s.length()-1);
    }
}
================================
class Solution{
     static boolean ispalindrome(String s, int i,int j)
     {
         while(i<=j)
         {
             if(s.charAt(i)==s.charAt(j))
              {i++; j--;}
              else return false;
         }
         return true;
     }
    
    static int solve(String s, int i,int j,int [][]t)
    {
        if(i>=j || ispalindrome(s,i,j)) return 0; // ek element hua to bhi parition 0 krne honge
        if(t[i][j]!=-1) return t[i][j];
        int ans=Integer.MAX_VALUE;
        for(int k=i;k<=j-1;k++)
        {
            int tans= solve(s,i,k,t)+solve(s,k+1,j,t)+1;
           ans= Math.min(ans,tans);
        }
     return t[i][j]=ans;
    }
    static int palindromicPartition(String s)
    {
        int t[][]= new int[501][501];
        for(int x[]: t) Arrays.fill(x,-1);
        return solve(s,0,s.length()-1,t);
    }
}

============================================

class Solution{
    
     static boolean ispalindrome(String s, int i,int j)
     {
         while(i<=j)
         {
             if(s.charAt(i)==s.charAt(j))
              {i++; j--;}
              else return false;
         }
         return true;
     }
    
    static int solve(String s, int i,int j,int [][]t)
    {
        if(i>=j || ispalindrome(s,i,j)) return 0; // ek element hua to bhi parition 0 krne honge
        if(t[i][j]!=-1) return t[i][j];
        int ans=Integer.MAX_VALUE;
        for(int k=i;k<=j-1;k++)
        {
            int l=0,r=0;
            if(t[i][k]!=-1) l= t[i][k];
            else l=solve(s,i,k,t);
            
            if(t[k+1][j]!=-1) r=t[k+1][j];
            else r=solve(s,k+1,j,t);
            
            int tans= l+r+1;
           ans= Math.min(ans,tans);
        }
     return t[i][j]=ans;
    }
    static int palindromicPartition(String s)
    {
        int t[][]= new int[501][501];
        for(int x[]: t) Arrays.fill(x,-1);
        return solve(s,0,s.length()-1,t);
    }
}