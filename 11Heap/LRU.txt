class LRUCache {
    final Node   head=new Node();
    final Node tail =new Node();
    Map<Integer,Node> map;
    int cachecap;
    public LRUCache(int capacity) {
        map=new HashMap();
        this.cachecap=capacity;
        head.next=tail;
        tail.prev=head; 
    }
    
    public int get(int key) {
       int res=-1;
       Node node=map.get(key);
        if(node!=null)
       {  res=node.val;
          remove(node); // delete from cur pos
          add(node);    // inserted at front
       }
        return res;
    }
    
    public void put(int key, int value) {
         Node node=map.get(key);
     
     if(node!=null){  // node already present
         remove(node); //delete from curn pos
         node.val=value;  // change its value in hashmap
         add(node);     // insert at front
     }
     else  {
         if(map.size()==cachecap)   // if size is full
         {
             map.remove(tail.prev.key); //remove least recently used from map
             remove(tail.prev);        // remove  least recently used from  dll
         } 
     Node newnode= new Node();
     newnode.key=key;
     newnode.val=value;
     map.put(key,newnode); //insert new in map
     add(newnode);         // insert at front in dll
    }
        
    }
    public void add (Node node)
    { 
       Node headnext=head.next;
       head.next=node;
       node.prev=head;
       headnext.prev=node;
       node.next=headnext; 
    }
    public void remove(Node node)
    { 
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    class Node
    { int key; int val; Node prev; Node next; }
}




========================================================

class LRUCache {  
  Node head = new Node(0, 0), tail = new Node(0, 0);
  Map<Integer, Node> map = new HashMap();
  int capacity;
  
  public LRUCache(int _capacity) {
    capacity = _capacity;
    head.next = tail;
    tail.prev = head;
  }

  public int get(int key) {
    if(map.containsKey(key)) {
      Node node = map.get(key);
      remove(node);
      insert(node);
      return node.value;
    } else {
      return -1;
    }
  }

  public void put(int key, int value) {
    if(map.containsKey(key)) {
      remove(map.get(key));
    }
    if(map.size() == capacity) {
      remove(tail.prev);
    }
    insert(new Node(key, value));
  }
  
  private void remove(Node node) {
    map.remove(node.key);
    node.prev.next = node.next;
    node.next.prev = node.prev;
  }
  
  private void insert(Node node){
    map.put(node.key, node);
    node.next = head.next;
    node.next.prev = node;
    head.next = node;
    node.prev = head;
  }
  
  class Node{
    Node prev, next;
    int key, value;
    Node(int _key, int _value) {
      key = _key;
      value = _value;
    }
  }
    
}