class Solution {
    class Pair{
         int f,v;
         public Pair(int ff, int vv){
             f=ff; v=vv;
         } 
    }
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> hm= new HashMap<>();
        for(int i: nums)   hm.put(i,hm.getOrDefault(i,0)+1);
        
        PriorityQueue<Pair> pq= new PriorityQueue<Pair>(k, new Comparator<Pair>() {
                public int compare(Pair n1, Pair n2) {
                     return n1.f-n2.f; // min heap
                }
        });
        
        for(int key: hm.keySet()) 
        {
            pq.add(new Pair(hm.get(key),key));   
            if(pq.size()>k) pq.poll();
        }
        int i=0;
        int[] ans= new int[k];
        while(pq.size()>0)     ans[i++]=pq.poll().v;
        
       return ans; 
    }
}