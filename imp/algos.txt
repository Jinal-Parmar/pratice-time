import java.io.*;
import java.util.*;

// 2 pointera
// 3sum
public List<List<Integer>> threeSum(int[] nums) {
        
        /*
        1. brute force
         for(int i=0)
            for(int j=i+1)
                for(int k=j+1)
                
                num[i]+nums[j]+nums[k]=sum=0
                unique triples- use set
                
                T-O(n-cube*logn)
                
        2. hashmap- frequency of each nums[i]
           for(int i=0)
            hash[nums[i]]--;
            for(int j=i+1)
              hash[nums[j]]--;
              find (-(nums[i]+nums[j])) --> add in set in sorted way so unique hi jae
              hash[nums[j]]++;
              
            hash[nums[i]]++;
            
            T-O(n-sq*logn)
                
         */
        
        // sort it and use pointer
        Arrays.sort(nums);
        List<List<Integer>> ans=new LinkedList<>();
        for(int i=0;i<nums.length-2;i++)
        {
            if(i==0 || (i>0 && nums[i]!=nums[i-1]))
            {
               int l=i+1,r=nums.length-1,c= -nums[i];
               while(l<r)
               {
                int sum_2=nums[l]+nums[r];
                if(sum_2==c)
                {
                    ans.add(Arrays.asList(nums[i],nums[l],nums[r])); 
                    while(l<r && nums[l]==nums[l+1]) l++; // avoid  duplicates
                    while(l<r && nums[r]==nums[r-1]) r--; // avoid  duplicates
                    
                     l++; r--;
                }
                     
                else if(sum_2> c)   
                   r--;
                else 
                   l++;    
                }
            }    
            
        }
        
        return ans;
    }

//Container With Most Water
 
   public int maxArea(int[] height) {

/*    // brute force T-O(n^2)
	int ans=0;
        for(int i=0;i<height.length;i++)
        {  
            for(int j = i + 1; j < height.length; j++)
            ans = Math.max(ans,Math.min(height[i],height[j]) *(j - i));
        }            
        return ans;
*/
        int ans=0,l=0,r=height.length-1;
        
        while(l<r)
        {  
      		if(height[l]<height[r])
        	   { ans=Math.max(ans,height[l]*(r-l)); l++;}
                else
                   { ans=Math.max(ans,height[r]*(r-l)); r--;}  
        }
        return ans;
    }


=======================================================

class jinal{
    
    
    
    // MATHS
    // prime no.
    // (1,root n] mein no factors present then its prime no.
    
    // if 1 to k me find krne hai all prime no.s => o(k*rootn)
    
    //sieve of eratosthenes algo
    
    /*
    eg.
     1 to 12
     go till root 12= 3     
   0 1 2 3 4 5 6 7 8 9 10 11 12
   f f t t t t t t t t t t t t
           f   f   f f f     f
     
    
    */
    
    static boolean[] sievealgo(int n)
    {
      //n+1 size array 
      
      boolean [] b=new boolean[n+1];
      Arrays.fill(b,true);
      b[0]=b[1]=false;
      for(int i=2;i*i<=n;i++) // rootn times
      {
            for(int j=2*i;j<=n;j+=i)   
            b[j]=false;
      }
      
      return b; 
    }
    
    // ECD gcd find krne
    /*
       gcd (a,b)= gcd(a-b,b) a>b
       do till one of this becomes 0
       
       gcd(a,b)= gcd(b,a%b) a%b!=0
       
    */
    static int gcd(int a,int b)
    {
        return a%b==0?b:gcd(b,a%b);
        
       // if(b==0) return a;
        //return gcd(b,a%b);
    }
    static long fastpower(long a,long b,int n)
    {
       long r=1;
         // even ki last bit 0 
         // odd ki last bit 1
       while(b>0)  
       {
            if((b&1)!=0) //odd
            {
                 r=(r*a%n)%n;  //r=r*a;    r%n=r only          
            }
            a=(a%n*a%n)%n; //a*a
            b=b>>1;  //b=b/2;
       }
       return r;
    }
    
    // BigInteger 
    // Catalan numbers
    // Pigeon hole principle
    // inclusion-exclusion
    
    public static void main (String[] args) {
    
    int n=20; boolean[] b=new boolean[n+1];
    b=sievealgo(n);
        for(int i=0;i<=n;i++)
        {  if(b[i]) System.out.print(i+ " ");  }
    
    System.out.println(fastpower(3978432,5,1000000007));    
        
    }
}




