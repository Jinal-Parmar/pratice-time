

import java.io.*;
import java.util.*;


class Solution{

     //1. max sum sub array of size k
     //window size j-i+1
    static int maximumSumSubarray(int k, ArrayList<Integer> a,int n){
        int i=0,j=0,sum=0,max=Integer.MIN_VALUE;
        while(j<n)
        {
            sum+=a.get(j);
                if(j-i+1<k)
                j++;
                else if(j-i+1==k){
                max=Math.max(max,sum);
                sum-=a.get(i);
                j++; i++;   
                }
        }
        return max;
    }
 
    //2. First negative integer in every window of size k
    static void firstnegative(int k, ArrayList<Integer> a,int n){
        int i=0,j=0;
        LinkedList<Integer> b=new LinkedList<>();
        while(j<n)
        {
                if(a.get(j)<0)
                b.add(a.get(j));
                
                if(j-i+1<k)
                j++;
                
                else if(j-i+1==k){
                  
                  if (!b.isEmpty())    System.out.print(b.peek()+" ");
                  else        System.out.print(0+" ");
                 
                  if(a.get(i)==b.peek())  b.poll();
                  
                  i++;
                  j++;
                }
        }
    }
    
    //3. Count Occurrences Of Anagrams
    static int Count_Occ_Anagrams(String t,String w){
        
        int i=0,j=0,ans=0,k=w.length();
        HashMap<Character,Integer> m=new HashMap<>(); 
        for(char x: w.toCharArray())  
          m.put(x, m.getOrDefault(x, 0) + 1); // first count frequency of word
        
        int c=m.size();// c is the no. of unique letters in word
                       //when c becomes zero (empty map) then we will ans++
        while(j<t.length())
        {
            if(m.containsKey(t.charAt(j))) //if found in map then -- its value in map
            {
                m.put(t.charAt(j),m.getOrDefault(t.charAt(j), 0) - 1);
                if(m.get(t.charAt(j))==0) c--; // if its value becomes 0 then c--
            }
            if((j-i+1)<k) j++;
            else if((j-i+1)==k) 
            {
              if(c==0) ans++; // as map is empty so we got 1 anagram NOW
              if(m.containsKey(t.charAt(i)))
              {
                // we need to remove ith character to slide window
                // as we were -1 when we get the Character
                // now +1 to remove Character
 
                m.put(t.charAt(i),m.getOrDefault(t.charAt(i), 0) + 1);
                if(m.get(t.charAt(i))==1) c++; // jab 0 to 1 ho tabhi badhana hai
              }
            i++;  j++;
        }
        }
        return ans;
    }

    //4. Maximum of all subarrays of size k
    static void maxofallsubarray(int k, ArrayList<Integer> a,int n){
        
      int i=0,j=0;
      
      while(j<n)
      {
          
          
          
      }
      
    }
    
    //Variable sliding window
    //0. Largest subarray sum k
    // only for positive no.s
    public static int lenOfLongSubarr(int a[], int n, int k) {
        int i=0,j=0,cur=0;
        int maxi=0;
        while(j<n)
        {
            cur+=a[j];
            if(cur<k)
            j++;
            else if(cur==k)
            {
                maxi=Math.max(maxi,j-i+1);
                j++;
            }
            else 
            { 
                while(cur>k)
                {
                  cur-=a[i];
                  i++;
                }
                j++;
            }
        }
        return maxi;
    }
    //1. Longest substring with k unique characters
   public static int longestkSubstr(String s, int k) {
        int ans=-1,i=0,j=0,cur_cnt=0;
        HashMap<Character,Integer> m=new HashMap<>();
        while(j<s.length())
        {
            m.put(s.charAt(j),m.getOrDefault(s.charAt(j), 0) + 1);
            if(m.size()<k)
            {
                j++;                
            }
            else if(m.size()==k)
            {
              ans=Math.max(ans,j-i+1);
              j++;  
            }
            else
            {
                while(m.size()>k)
                {
                    m.put(s.charAt(i),m.getOrDefault(s.charAt(i), 0) - 1);
                    if(m.get(s.charAt(i))==0) m.remove(s.charAt(i));
                    i++;
                }
                j++;
            }
        }
        return ans;
    }

    //2. Longest substring without repeating characters
    int longestUniqueSubsttr(String s){
        int ans=-1,i=0,j=0,cur_cnt=0;
        HashMap<Character,Integer> m=new HashMap<>();
        while(j<s.length())
        {
            m.put(s.charAt(j),m.getOrDefault(s.charAt(j), 0) + 1);
            //if(m.size()>j-i+1)
            //j++;                
            
             if(m.size()==j-i+1)
            {
              ans=Math.max(ans,j-i+1);
              j++;  
            }
            else if(m.size()<j-i+1)
            {
                while(m.size()<j-i+1)
                {
                    m.put(s.charAt(i),m.getOrDefault(s.charAt(i), 0) - 1);
                    if(m.get(s.charAt(i))==0) m.remove(s.charAt(i));
                    i++;
                }

                j++;
            }
        }
        return ans;
    }
   
    //3. Pick toys- arr with no. of unique char 2
    int longestUniqueSubsttr(String s){
        int ans=-1,i=0,j=0,cur_cnt=0;
        HashMap<Character,Integer> m=new HashMap<>();
        while(j<s.length())
        {
            m.put(s.charAt(j),m.getOrDefault(s.charAt(j), 0) + 1);
            if(m.size()<2)
            i++;                
            
            else if(m.size()==2)
            {
              ans=Math.max(ans,j-i+1);
              j++;  
            }
            else if(m.size()>2)
            {
                while(m.size()>2)
                {
                    m.put(s.charAt(i),m.getOrDefault(s.charAt(i), 0) - 1);
                    if(m.get(s.charAt(i))==0) m.remove(s.charAt(i));
                    i++;
                }

                j++;
            }
        }
        return ans;
    }

   
    //4. Minimum window substring
    public static String smallestWindow(String s, String t)
    { 
        if(t.length()> s.length())
            return "-1";
        HashMap<Character, Integer> m = new HashMap<>();
        for (char c: t.toCharArray())
            m.put(c,m.getOrDefault(c,0) + 1);
       
       int i=0,j=0, count=m.size(),start=0, ans = Integer.MAX_VALUE;
       while(j<s.length())
       {
            m.put(s.charAt(j),m.getOrDefault(s.charAt(j),0) - 1);
            if (m.get(s.charAt(j)) == 0)
            count--;
            
            while (count == 0)
            {
                if (ans > j - i + 1)
                {
                    ans = Math.min(ans, j - i + 1);
                    start = i;
                }
                m.put(s.charAt(i),m.getOrDefault(s.charAt(i),0) + 1);
                if (m.get(s.charAt(i)) > 0)
                    count++;
                
                i++;
             }
        j++;
       }
       if (ans != Integer.MAX_VALUE)
        return String.valueOf(s).substring(start, ans+start);
    else
        return "-1";
    }
    
    public static void main(String []args)
    {
        //List<Integer> x= Arrays.asList(1, 4, 2, 10, 2, 3, 1, 0, 20);
        //ArrayList<Integer> a= new ArrayList<>();
        //a.addAll(x);
        //System.out.print(maximumSumSubarray(4,a,a.size()));
       
        //List<Integer> x= Arrays.asList(12, -1, -7, 8, -15, 30, 16, 28);
        //ArrayList<Integer> a= new ArrayList<>();
        //a.addAll(x);
        //firstnegative(3,a,a.size());
        
        //String text = "aabaabaa";
        //String word = "aaba";
        //System.out.print(Count_Occ_Anagrams(text, word));
    
        //List<Integer> x= Arrays.asList(1, 2, 3, 1, 4, 5, 2, 3, 6);
        //ArrayList<Integer> a= new ArrayList<>();
        //a.addAll(x);
        //maxofallsubarray(3,a,a.size());
        
        //System.out.print(lenOfLongSubarr(new int[]{10, 5, 2, 7, 1, 9},6,15));
    
        //System.out.print(longestkSubstr("aabacbebebe",3));
         
         System.out.print(longestUniqueSubsttr("geeksforgeeks"));
        
    }
}
