class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        /*
        1. merge arrays then find median
            T-O(n+m) S- O(n+m)
        2.  we wont store it we will only count and find middle-th no. 
            T-O(n+m) S- O(1)
        
        
        3. since sorted use binary search
          T-O(min(log m, log n))
         1 3 4 7 10  12
         2 3 6 15
         
         1 3 4 7| 10 12                // 7<=3 false so move left
         2      | 3  6 15              // 2<=10 true 
         
         1 3 4 | 7 10 12     
         2 3   | 6 15
         
         1 3    | 4  7 10 12          // 3<=15 true
         2 3 6  | 15                  // 6<=4 false so move right
         
        
        */
       
        if(nums2.length<nums1.length) return  findMedianSortedArrays(nums2,nums1);
        
        int n1=nums1.length,n2=nums2.length,l=0,h=n1;
        while(l<=h)
        {
            int cut1=(l+h)>>1,cut2=((n1+n2+1)/2 )-cut1;
            int left1=cut1==0?Integer.MIN_VALUE:nums1[cut1-1];
            int left2=cut2==0?Integer.MIN_VALUE:nums2[cut2-1];
            
            int right1=cut1==n1?Integer.MAX_VALUE:nums1[cut1];
            int right2=cut2==n2?Integer.MAX_VALUE:nums2[cut2];
              
            if(left1<=right2 && left2<=right1)
            {
                if((n1+n2)%2==0)
                    return (Math.max(left1,left2)+ Math.min(right1,right2))/2.0;
                else
                    return Math.max(left1,left2);
            }
            if(left1>right2) h=cut1-1;
            else  l=cut1+1;  
        }
        return 0.0;
    }
}