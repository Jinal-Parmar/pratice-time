
class GFG {

    static void printNos(int n)
    {
        if(n > 0)
        {
            printNos(n - 1);
            if (System.out.printf(n+" ") == null) {}
        }
        return;
    }
    
    static void selectionsort(int a[])
    {
        // W/A/B-O(n^2)
        for(int i=0;i<a.length-1;i++) // last element will be at its appropiate place only
        { 
            int imin=i;
            for(int j=i+1;j<a.length;j++)
            {
                if(a[j]<a[imin])
                imin=j;
            }
            swap(i,imin,a);
        }
    }
    static void swap(int x,int y,int a[])
    {
        int t=a[x];
        a[x]=a[y];
        a[y]=t;
    }
    
    static void bubblesort(int a[])
    {
        // largest element will bubble upto end
        // after n-1 passes it will be sorted
        // W/A-O(n^2)
        //B-O(n) if sorted array pass kiya
        for(int i=0;i<a.length-1;i++) 
        { 
            int f=0; 
           // <a.length-1 ..... so last element a[n-1] access krne k liye
            for(int j=0;j<a.length-1-i;j++) // a.length-1-i coz end wala part sort hota jaega
            {
                if(a[j]>a[j+1]){
                swap(j,j+1,a); 
                f=1;// if 1 swap hua ho atleast;
                }
            }
            if(f==0) break; // if ek bhi swap na hua ho
        }
    }
    
    static void insertionsort(int a[])
    {
        //W/A-O(n^2)
        //B-O(n) if sorted array pass kiya
      for(int i=1;i<a.length;i++)
      {
          int v=a[i],h=i;
          while(h>0 &&a[h-1]>v)
          {a[h]=a[h-1]; h--;} // new hole will be at h-1
           a[h]=v;    
      }
    }
    
    static void merge(int[] l,int[] r,int a[])
    {
         int left=l.length,right=r.length;
         int i=0,j=0,k=0;
         while(i<left && j<right)
         {
             if(l[i]<=r[j])
             {a[k]=l[i];  i++;}
             else 
             {a[k]=r[j];  j++;}
             k++;
         }
         while(i<left)
        {  a[k]=l[i]; i++; k++;   }
         while(j<right)
        {  a[k]=r[j]; j++; k++;   }
    }
    
    static void mergesort(int a[])
    {
      if(a.length>1) //base condition
      {int mid=(a.length)/2;
      int l[]=new int[mid],r[]=new int[a.length-mid]; 
      
      for(int i=0;i<mid;i++) l[i]=a[i];
      for(int i=mid;i<a.length;i++) r[i-mid]=a[i];
      
      mergesort(l); mergesort(r);
      merge(l,r,a);
      }
    }
    
    static void quciksort(int []a)
    { quciksort(a,0,a.length-1); }
    
    static int part(int []a,int s,int e)
    {
        int p=a[e],pidx=s;
        for(int i=s;i<e;i++)
        {
            if(a[i]<=p)
            { 
             swap(i,pidx,a);
             pidx++;
            }
        }
        swap(pidx,e,a);
        return pidx;
    }
    static void quciksort(int []a,int s,int e)
    {
       //W-o(n^2) 
       // inplace
    if(s<e){
        int pidx=part(a,s,e); // partition krke pivot ko sahi index p dalega
        quciksort(a,s,pidx-1);
        quciksort(a,pidx+1,e);
    }
    }
 
    public static void main(String[] args)
    {
        //printNos(10);
        int a[]={5,7,3,2,4,1,6};
        quciksort(a);
        for(int x: a)
        System.out.print(x+" ");
    }
}