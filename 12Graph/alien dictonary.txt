// https://www.lintcode.com/problem/892/description
public class Solution {
     public int getInt(char c) { return (c-'a');}
     public boolean checkcycledfs(int n, ArrayList<ArrayList<Integer>> adj, int vis[], int pathvis[], Stack<Integer> stack)
     {
         vis[n]=1; pathvis[n]=1;
         for(int x: adj.get(n))
         {
             if(vis[x]==0)
              {
                  if(checkcycledfs(x,adj,vis,pathvis,stack)) return true;
              }
             else if(pathvis[x]==1) return true; 
         }
        pathvis[n]=0;
        stack.push(n); 
        return false;
     }

    public String alienOrder(String[] words) {
        int n=words.length;
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<26;i++)  adj.add(new ArrayList<>());
        
        int  pres[]= new int[26], vis[]=new int[26], pathvis[]= new int[26];
        for(String x: words)
             for(char y: x.toCharArray())   { pres[getInt(y)] =1; }

         for(int i=0;i<n-1;i++)
        {
            String s1=words[i],s2=words[i+1];
            //int m=Math.min(s1.length(),s2.length()); 
            int m=s1.length();
            for(int j=0;j<m;j++)
            {
                // raja raj
                if(j>=s2.length())      return "";
                if(s1.charAt(j)!=s2.charAt(j))
                {   
                    adj.get(getInt(s1.charAt(j))).add(getInt(s2.charAt(j))); 
                    break;
                }
            }  
        }
        Stack<Integer> stack= new Stack<>();
        String ans="";
        for(int i=25;i>=0 ;i--)
        {
            if(pres[i]==1&&vis[i]==0)
              if(checkcycledfs(i,adj,vis,pathvis,stack)== true)  return "";  
	}  
        while(!stack.isEmpty())   ans+=(char)(stack.pop()+'a'); 
        return ans;
    }   
    // edge cases
    // if no mismatch longer pehle ana chhahiye
    // no cycle should be  there
}

========================================================

class Solution {
    public String alienOrder(String[] words) {
        Map<Character, Set<Character>> graph = new HashMap<>();
        int[] inDegree = new int[26];
        buildGraph(words, graph, inDegree);
        
        String order = topologicalSort(graph, inDegree);
        return order.length() == graph.size() ? order : "";
    }
    
    private void buildGraph(String[] words, Map<Character, Set<Character>> graph, int[] inDegree) {
        for (String word : words) {
            for (char c : word.toCharArray()) {
                graph.put(c, new HashSet<>());
            }
        }
        
        for (int i = 1; i < words.length; i++) {
            String first = words[i - 1];
            String second = words[i];
            int length = Math.min(first.length(), second.length());
            
            for (int j = 0; j < length; j++) {
                char parent = first.charAt(j);
                char child = second.charAt(j);
                if (parent != child) {
                    if (!graph.get(parent).contains(child)) {
                        graph.get(parent).add(child);
                        inDegree[child - 'a']++;
                    }
                    break;
                }
            }
        }
    }
    
    private String topologicalSort(Map<Character, Set<Character>> graph, int[] inDegree) {
        Queue<Character> queue = new LinkedList<>();
        for (char c : graph.keySet()) {
            if (inDegree[c - 'a'] == 0) {
                queue.offer(c);
            }
        }
        
        StringBuilder sb = new StringBuilder();
        while (!queue.isEmpty()) {
            char c = queue.poll();
            sb.append(c);
            for (char neighbor : graph.get(c)) {
                inDegree[neighbor - 'a']--;
                if (inDegree[neighbor - 'a'] == 0) {
                    queue.offer(neighbor);
                }
            }
        }
        return sb.toString();
    }
}

