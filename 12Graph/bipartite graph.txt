// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int V = Integer.parseInt(S[0]);
            int E = Integer.parseInt(S[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for(int i = 0; i < V; i++){
                adj.add(new ArrayList<Integer>());
            }
            for(int i = 0; i < E; i++){
                String[] s = br.readLine().trim().split(" ");
                int u = Integer.parseInt(s[0]);
                int v = Integer.parseInt(s[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isBipartite(V, adj);
            if(ans)
                System.out.println("1");
            else System.out.println("0");
       }
    }
}// } Driver Code Ends


class Solution
{
    public boolean dfs(int node, int color[],ArrayList<ArrayList<Integer>>adj)
    {
        if(color[node]==0) color[node]=1;
        for(int x: adj.get(node))
        {
            if(color[x]==0)
            {
                color[x]=-color[node];
                if(!dfs(x,color,adj)) return false;
            }
            else if(color[x]==color[node])  return false;
        }
        return true;
    }
    
    public boolean bfs(int node, int color[],ArrayList<ArrayList<Integer>>adj)
    {
        if(color[node]==0) color[node]=1;
        Queue<Integer> q= new LinkedList<>();
        q.add(node);
        while(!q.isEmpty())
        {
            int n=q.poll();
            for(int x: adj.get(n))
            {
                if(color[x]==0)
                {
                    color[x]=-color[n];
                    q.add(x);
                }
                else if(color[x]==color[n]) return false;
            }
        }
        return true;
    }
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int color[]= new int[V]; 
        for(int i=0;i<V;i++)
            if(color[i]==0)
             if(!bfs(i,color,adj)) // if(!dfs(i,color,adj))
              return false;
        return true;      
    }
}