// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V + 1; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends


/*Complete the function below*/

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean dfs(int node,boolean vis[],boolean pathvis[], ArrayList<ArrayList<Integer>> adj)
    {
        vis[node]= true; pathvis[node]=true;
        for(int x : adj.get(node))
        {
               if(!vis[x])
               {
                   vis[x]=true;
                   if(dfs(x,vis,pathvis,adj))  return true;
               }
               else if(pathvis[x])
               return true;
        }
        pathvis[node]= false;
        return false;
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[]= new boolean[V],pathvis[]= new boolean [V];
        
        for(int i=0;i<V;i++)
            if(!vis[i])
                if(dfs(i,vis,pathvis,adj))
                    return true;
                    
        return false;            
    }
}