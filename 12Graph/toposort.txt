

// dfs
static void addtostack_dfs(int node,Stack<Integer> s,boolean vis[],ArrayList<ArrayList<Integer>> adj)
    {
        vis[node]= true;
        for(int x: adj.get(node))
          if(!vis[x])
          addtostack_dfs(x,s,vis,adj);
          
         s.push(node); 
    }    
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
      int [] ans= new int[V]; boolean vis[]= new boolean[V];
      Stack<Integer> s= new Stack<>();
      for(int i=0;i<V;i++)
         if(!vis[i]) addtostack_dfs(i,s,vis,adj);
      
      int i=0;
      while(!s.isEmpty())  ans[i++]= s.pop();
      return ans;
    }
=====================================================================
// bfs
static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    { 
      int []indeg=new int[V];
        for(int i=0;i<V;i++) 
          for(int x: adj.get(i)) indeg[x]++;
            
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++)
          if(indeg[i]==0) q.add(i);
        
        int [] ans= new int[V]; int i=0;
        while(!q.isEmpty())
        {
            int n=q.poll();
            ans[i++]=n;// print ans  
            for(int x: adj.get(n))
            {
                indeg[x]--;
                if(indeg[x]==0) q.add(x);
            }
        }
        return ans;
    }