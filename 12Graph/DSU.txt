class DSU{
    ArrayList<Integer> parent= new ArrayList<>();
    ArrayList<Integer> size= new ArrayList<>();
    ArrayList<Integer> rank= new ArrayList<>();
    public DSU(int n)
    {
        for(int i=0;i<=n;i++)
        { parent.add(i); size.add(1); rank.add(0); }
    }
    public int findparent(int n)
    {
        if(parent.get(n)==n)  return n;
        // path compression ht-log(n)
        parent.set(n, findparent(parent.get(n)));
        return parent.get(n);
    }
    
    public void union(int u,int v)
    {
        int   pu= findparent(u), pv=findparent(v);
        if(pu==pv) return;
         //path + size compression 4xalpha
        if(size.get(pu)<size.get(pv))
        {
            parent.set(pu,pv);
            size.set(pv,size.get(pv)+size.get(pu));
        }
        else 
        {
            parent.set(pv,pu);
            size.set(pu,size.get(pu)+size.get(pv));
        }
    }
    
    public void unionRank(int u,int v)
    {
        int pu= findparent(u), pv=findparent(v);
        if(pu==pv) return;
        
        if(rank.get(pu)<rank.get(pv))        parent.set(pu,pv);           
        else if(rank.get(pu)>rank.get(pv))   parent.set(pv,pu);        
        else 
        {
            parent.set(pu,pv);
            rank.set(pv,pv+1);
        }
    }
}