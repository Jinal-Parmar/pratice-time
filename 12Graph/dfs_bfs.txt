// { Driver Code Starts
// Initial Template for Java
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj =
                new ArrayList<ArrayList<Integer>>();
            for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            ArrayList<Integer> ans = obj.dfsOfGraph(V, adj);
            for (int i = 0; i < ans.size(); i++)
                System.out.print(ans.get(i) + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


class Solution {
    
    public void dfs(int node,boolean vis[],ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans)
   {
       vis[node]=true;
       ans.add(node); // System.out.print(node+" ");
       for(int x: adj.get(node))
       {
           if(!vis[x])
           dfs(x,vis,adj,ans);
       }
   }
    public ArrayList<Integer> dfsOfGraph(int n, ArrayList<ArrayList<Integer>> adj) {
       ArrayList<Integer> ans= new ArrayList<>();
       boolean vis []= new boolean[n];
       for(int i=0;i<n;i++)
       {
           if (!vis[i])
           dfs(i,vis,adj,ans);
       }
       return ans;
    }
}



===========================================================================

// { Driver Code Starts
// Initial Template for Java
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                // adj.get(v).add(u);
            }
            Solution obj = new Solution();
            ArrayList<Integer> ans = obj.bfsOfGraph(V, adj);
            for (int i = 0; i < ans.size(); i++)
                System.out.print(ans.get(i) + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends



class Solution {
    // Function to return Breadth First Traversal of given graph.
    public void bfs(int node, boolean vis[],ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans)
    {
        vis[node]=true;
        Queue<Integer> q= new LinkedList<>();
        q.add(node);
        while(!q.isEmpty())
        {
            int n=q.poll();
            ans.add(n); // System.out.print(n+" ");
            for(int x: adj.get(n))
            { 
                if(!vis[x])
                   { vis[x]= true; q.add(x); }
            }
        }
    } 
    public ArrayList<Integer> bfsOfGraph(int n, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> ans= new ArrayList<>();
        boolean vis[]= new boolean [n];
        // for(int i=0;i<n;i++)
        // {
        //     if(!vis[i])
        //     bfs(i,vis,adj,ans);
        // }
       bfs(0,vis,adj,ans);
        return ans;
    }
}