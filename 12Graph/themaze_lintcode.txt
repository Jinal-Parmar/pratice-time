//bfs

public class Solution {
    public class Pair{
    int x,y;
        public Pair(int x,int y)
        { this.x=x; this.y=y; }
    }
    public boolean hasPath(int[][] maze, int[] s, int[] e) {
        int n=maze.length,m=maze[0].length;
        boolean vis[][]= new boolean[n][m];
        
        Queue<Pair> q= new LinkedList<>();
        q.add(new Pair(s[0],s[1]));
        vis[s[0]][s[1]]=true;
       
        while(!q.isEmpty())
        {
            int x=q.peek().x; int y=q.peek().y;
            if(x==e[0] && y==e[1]) return true;
            q.poll();

            int dx[]= new int []{-1,0,1,0};
            int dy[]=new int[]{0,1,0,-1};
            for(int i=0;i<4;i++)
            {
                int newx=x;
                int newy=y;

                while(newx>=0 && newx<n && newy>=0 && newy<m && maze[newx][newy]==0)
                {
                    newx+=dx[i]; newy+=dy[i];
                }
                newx-=dx[i]; newy-=dy[i];
                if(!vis[newx][newy])
                {
                    vis[newx][newy]=true;
                    q.add(new Pair(newx,newy));
                }
            }
        }
        return false;
    }
}