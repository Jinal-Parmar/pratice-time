import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
    public static void bellmanford_algo(int n, ArrayList<Pair> e, PrintWriter out)
    {
        // o(n-sq)
        // dijkstra was nlogn algo
        int []dis= new int[n+1]; Arrays.fill(dis,Integer.MAX_VALUE); dis[1]=0;
        for(int i=0;i<n-1;i++)
        {
            for(Pair x: e)
            {
                int u=x.u, v=x.v,w=x.w;
                if(dis[u]+w< dis[v])
                dis[v]= dis[u]+w;
            }
        }
        
        for(Pair x: e)
            {
                int u=x.u, v=x.v,w=x.w;
                if(dis[u]+w< dis[v])
                {
                    dis[v]= dis[u]+w;
                    out.println("-VE Cycle exists");
                    return;
                }
            }
        for(int i=1;i<=n;i++)
        out.println(i+"--"+dis[i]);
            
        
    }
	public static void main (String[] args) throws java.lang.Exception
	{ 
	 PrintWriter out=new PrintWriter(System.out);
	 
	 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
     StringTokenizer st = new StringTokenizer(br.readLine()," ");
     int n=Integer.parseInt(st.nextToken()), m=Integer.parseInt(st.nextToken());
     
    //   ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
    //   for(int i=0;i<=n;i++)   adj.add(new ArrayList<Integer>());
    ArrayList<Pair> e= new ArrayList<>();
     for(int i=0;i<m;i++)
        {
           st = new StringTokenizer(br.readLine()," ");
           int u=Integer.parseInt(st.nextToken()), v=Integer.parseInt(st.nextToken()),  w=Integer.parseInt(st.nextToken());
            // adj.get(u).add(new Pair(v,w));
            // adj.get(v).add(new Pair(u,w));
            e.add(new Pair(u,v,w));
        }

     bellmanford_algo(n,e,out);
       out.close();
	}
}

class Pair{
      int u,v,w;
      public Pair(){}
      public Pair(int u,int v,int w)
      {  this.u=u; this.v=v; this.w=w;  }
    }


// 3 3
// 1 2 -2
// 2 3 -4
// 3 1 -1

// -VE Cycle exists