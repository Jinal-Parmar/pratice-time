import java.io.*;
import java.lang.*;
import java.util.*;
class Pair{
    int n,dis;
    public Pair(int n, int dis)
    {this.n=n; this.dis=dis;}
}
class GFG {
    public static void zero_one_bfs(int V,int s, ArrayList<ArrayList<Pair>> adj)
    {
        Deque<Pair> dq= new ArrayDeque<>();
        dq.add(new Pair(s,0));
        int []dis= new int[V+1]; Arrays.fill(dis,Integer.MAX_VALUE);
        dis[s]=0;
        
        while(!dq.isEmpty())
        {
            Pair node=dq.poll();
            for(Pair x: adj.get(node.n))
            {
                if(node.dis+x.dis< dis[x.n])
                {
                    dis[x.n]= node.dis+x.dis;
                    if(x.dis==0)   dq.addFirst(new Pair(x.n,dis[x.n]));
                    else           dq.addLast(new Pair(x.n,dis[x.n]));
                }
            }
        }
        for(int i=0;i<=V;i++)
         System.out.println(i+"-"+dis[i]);
    }
	public static void main (String[] args) throws Exception {
	 
	 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
     StringTokenizer st = new StringTokenizer(br.readLine()," ");
     int n=Integer.parseInt(st.nextToken()), m=Integer.parseInt(st.nextToken());
     
     ArrayList<ArrayList<Pair>> adj= new ArrayList<>();
     for(int i=0;i<=n;i++)   adj.add(new ArrayList<Pair>());
     for(int i=0;i<m;i++)
        {
           st = new StringTokenizer(br.readLine()," ");
           int u=Integer.parseInt(st.nextToken()), v=Integer.parseInt(st.nextToken());
           int w=Integer.parseInt(st.nextToken());
            adj.get(u).add(new Pair(v,w));
            adj.get(v).add(new Pair(u,w));
        }
	 zero_one_bfs(n,1,adj);
	 
// 6 8
// 1 2 0
// 1 3 1
// 2 3 1
// 2 4 1
// 3 5 1
// 4 5 1 
// 4 6 0
// 5 6 1

// 0-2147483647
// 1-0
// 2-0
// 3-1
// 4-1
// 5-2
// 6-1

	}
}