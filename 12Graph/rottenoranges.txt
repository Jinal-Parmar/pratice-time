class Pair{
    int x,y,time;
    public Pair(int x,int y,int time)
    {
        this.x=x; this.y=y; this.time=time;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length, m=grid[0].length;
        int cntoranges=0;
        Queue<Pair> q= new LinkedList<>();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
               if(grid[i][j]== 2)
                   q.add(new Pair(i,j,0));
               if(grid[i][j]!=0) cntoranges++;
            }
        }
        int c=0,ans=0;
        while(!q.isEmpty())
        {
            int x=q.peek().x;
            int y=q.peek().y;
            int time =q.peek().time;
            q.poll();
            c++;
            ans=time;
            // (-1,0) (0,1) (1,0) (0,-1)
            int dx[]= new int []{-1,0,1,0};
            int dy[]=new int[]{0,1,0,-1};
            
            for(int i=0;i<4;i++)
            {
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx>=0 && newx<n && newy>=0 && newy<m && grid[newx][newy] == 1)
                {
                    grid[newx][newy] =2;
                    q.add(new Pair(newx,newy,time+1));
                }
            }            
        }
        if(c==cntoranges) return ans;
         return -1;
    }
}