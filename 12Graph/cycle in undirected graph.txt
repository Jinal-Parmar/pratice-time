// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isCycle(V, adj);
            if (ans)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends


class Pair{
    int node,prev;
    public Pair(int node, int prev){ this.node=node; this.prev=prev;}
}
class Solution {
    public boolean isCycle(int node,int prev,boolean vis[],ArrayList<ArrayList<Integer>> adj)
    {
        vis[node]=true;
        for(int x: adj.get(node)){
                if(!vis[x])
                {   
                    if(isCycle(x,node,vis,adj)==true)  return true;
                }
                else  if(prev!=x)  return true;
            }
        return false;
    }
    public boolean bfsisCycle(int node,boolean vis[],ArrayList<ArrayList<Integer>> adj)
    {
       Queue<Pair> q= new LinkedList<>();
       q.add(new Pair(node,-1));
        vis[node]=true;
        
        while(!q.isEmpty())
        {
            Pair n=q.poll();
            for(int x:adj.get(n.node))
            {
                if(!vis[x])
                {
                    vis[x]=true;
                    q.add(new Pair(x,n.node));
                }
                else if (x!=n.prev) return true;
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
       
        boolean vis[]=new boolean[V];
        for(int i=0;i<V;i++)
        { 
            if(!vis[i])
	        {
                if(bfsisCycle(i,vis,adj)) //if(isCycle(i,-1,vis,adj))
                return true;
            }
        }
        return false;
    }
}