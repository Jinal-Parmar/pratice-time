    
     long maxSubarraySum1(int a[], int n){
        // brute force
	// T- O(n-cube) 
	// (i=0->n) (j=i->n) (k=(i...j))	find sum

	// T-O(n-sq)  
	// find all subarray sums (i=0->n) sum=0(j=i->n) sum+=a[j] 
      long ans=0;
      for(int i=0;i<n;i++)
      {
          long c=0;
          for(int j=i;j<n;j++)
	  {
           c+=a[j];
           ans=Math.max(ans,c);
	  }
      }
      
      return ans==0 ? -1:ans;
    } 

 long maxSubarraySum2(int a[], int n){  
      long ans=Long.MIN_VALUE,c=0;
      // T-O(n)
      //int j=0,s=0,e=0; // jab indexs bhi puche we can maaintain indexs whenever we get maxi sum
      for(int i=0;i<n;i++)
      {
           c+=a[i];
           if(ans<c)
             {
               ans=c;    //ans =Math.max(ans,c);
                          // s=j; e=i; 
             }       
           if(c<0) 
	    {	
		  //j=i+1;
		c=0;
	     }
      }
      return ans==0 ? -1:ans;
     }    

      long maxSubarraySum3(int a[], int n){
      // to handle array of negative numbers
      //T-O(n) 
      
      long ans=a[0],c=a[0];
      for(int i=1;i<n;i++)
      {
          c=Math.max(a[i],c+a[i]);
           ans=Math.max(ans,c);
           
      }
      return ans==0 ? -1:ans;
    //1,2,3,-2,5
    //c 1/3/6/4/9 
    //ans 1/3/6/9
    }


     