
import java.io.*;
import java.util.*;
class Solution {
    
    private static void solve2(int i,int j,int[][] m, int n,ArrayList<String> ans,boolean [][]vis,String s, int[] di,int[] dj){
    if(i==n-1 && j==n-1){ ans.add(s);return; }
    String x="DLRU";
    for(int z=0;z<4;z++)
    {
     int nexti=i+di[z],nextj=j+dj[z];
     if(nexti>=0 && nextj>=0 && nextj<n && nexti<n && !vis[nexti][nextj] && m[nexti][nextj]==1)
     { vis[i][j]=true;  solve(nexti,nextj,m,n,ans,vis,s+x.charAt(z)); vis[i][j]=false; }
    }
   }
    
   private static void solve(int i,int j,int[][] m, int n,ArrayList<String> ans,boolean [][]vis,String s){
    if(i==n-1 && j==n-1){ ans.add(s);return; }
    //down   
    if(i+1<n && !vis[i+1][j] && m[i+1][j]==1)
     {  vis[i][j]=true; solve(i+1,j,m,n,ans,vis,s+"D"); vis[i][j]=false; }
    //left
    if(j-1>=0 && !vis[i][j-1] && m[i][j-1]==1)
     {  vis[i][j]=true; solve(i,j-1,m,n,ans,vis,s+"L"); vis[i][j]=false; }
    //right
    if(j+1<n && !vis[i][j+1] && m[i][j+1]==1)
     {  vis[i][j]=true; solve(i,j+1,m,n,ans,vis,s+"R"); vis[i][j]=false; }
    //up
    if(i-1>=0 && !vis[i-1][j] && m[i-1][j]==1)
     {  vis[i][j]=true; solve(i-1,j,m,n,ans,vis,s+"U"); vis[i][j]=false; }
   }
   
   public static ArrayList<String> findPath(int[][] m, int n) {
      ArrayList<String> ans=new ArrayList<>();
      boolean [][]vis= new boolean[n][n];
      
      //if(m[0][0]==1) solve(0,0,m,n,ans,vis,"");
      int []di={1,0,0,-1};int []dj={0,-1,1,0};
      if(m[0][0]==1) solve2(0,0,m,n,ans,vis,"",di,dj);
      return ans;
    }
}
class maincls{
    public static void main(String[] args){
       int m[][] = { 
                  { 1, 0, 0, 0, 0 },
                  { 1, 1, 1, 1, 1 },
                  { 1, 1, 1, 0, 1 },
                  { 0, 0, 0, 0, 1 },
                  { 0, 0, 0, 0, 1 } };
       int n = m.length;
       
       Solution ss= new Solution();
       ArrayList<String> output=ss.findPath(m,n); 
       for(String c: output){
           System.out.println(c);
       }
    }
}
// vis so dont go back to same path 
// while bscktracking undo vis cell so that other different paths and remove the character from the path formed 
// d l r u 4^(nxm)  sc-o(nxm)