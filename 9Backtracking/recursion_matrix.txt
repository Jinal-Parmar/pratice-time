import java.io.*;
import java.lang.*;

// print all paths from source to dest for nxm matrix
// moves- D and R
// T- 2^(nxm)
class GFG {
    
    public static void countpaths(int i, int j,String s, int n,int m)
    {
        if(i>=n|| j>=m)     return;
        
        if(i==n-1 && j==m-1)
        {
           System.out.println(s);
           return;
        }
        
        countpaths(i+1,j,s+='D',n,m);
        if(s.length()<=1) s="";
        else s=s.substring(0,s.length()-1);
        
        countpaths(i,j+1,s+='R',n,m);
        if(s.length()<=1) s="";
        else s=s.substring(0,s.length()-1);
    }
   
	public static void main (String[] args) {
	    
	    countpaths(0,0,"",3,2);
	   
	}
}

OR
===============================================================
import java.io.*;
import java.lang.*;
class GFG {
    
    public static void countpaths(int i, int j,StringBuilder s, int n,int m)
    {
        if(i>=n|| j>=m)     return;
        
        if(i==n-1 && j==m-1)
        {
           System.out.println(s);
           return;
        }
        
        countpaths(i+1,j,s.append('D'),n,m);
        s.deleteCharAt(s.length()-1);
        
        countpaths(i,j+1,s.append('R'),n,m);
        s.deleteCharAt(s.length()-1);     
    }
   
	public static void main (String[] args) {
	    countpaths(0,0,new StringBuilder(),3,2);   
	}
}


===============================================================
import java.io.*;
import java.lang.*;

// print all paths from source to dest for nxm matrix
// moves- all 4 paths but any cell visit only once
// T- 2^(nxm)

class GFG {
    
    public static void countpaths(int i, int j,StringBuilder s, int n,int m, boolean vis[][])
    {
         if(i>=n || j>=m || i<0 ||j<0 || vis[i][j]==true) return;
        
        if(i==n-1 && j==m-1)
        {
           System.out.println(s);
           return;
        }
        
        vis[i][j]=true;
        countpaths(i+1,j,s.append('D'),n,m,vis);
        s.deleteCharAt(s.length()-1);
        
        countpaths(i,j+1,s.append('R'),n,m,vis);
        s.deleteCharAt(s.length()-1);  
        
        countpaths(i-1,j,s.append('U'),n,m,vis);
        s.deleteCharAt(s.length()-1);
        
        countpaths(i,j-1,s.append('L'),n,m,vis);
        s.deleteCharAt(s.length()-1);
        
        vis[i][j]=false;
    }
   
	public static void main (String[] args) {
	    
	    countpaths(0,0,new StringBuilder(),3,2,new boolean [3][2]);
	   
	}
}

==================================================================
import java.io.*;
import java.lang.*;

// print all paths from source to dest for nxm matrix
// moves- all 4 paths but any cell visit only once
// T- 2^(nxm)

//    i  j
// D  1  0 
// R  0  1
// U -1  0
// L  0 -1

// if asked lexographical- DLRU
class GFG {
    
    public static void countpaths(int i, int j,StringBuilder s, int n,int m, boolean vis[][])
    {
        if(i>=n || j>=m || i<0 ||j<0 || vis[i][j]==true) return;
        
        if(i==n-1 && j==m-1)
        {
           System.out.println(s);
           return;
        }
        
        vis[i][j]=true;
        
	String jinal="DRUL";
        int dx[]=new int []{1,0,-1,0};
        int dy[]=new int[]{0,1,0,-1};
        
        for(int x=0;x<4;x++)
        {
          countpaths(i+dx[x],j+dy[x],s.append(jinal.charAt(x)),n,m,vis);
          s.deleteCharAt(s.length()-1);    
        }
        vis[i][j]=false;
    }
   
	public static void main (String[] args) {
	    
	    countpaths(0,0,new StringBuilder(),3,2,new boolean [3][2]);
	   
	}
}
=================================================================

import java.io.*;
import java.lang.*;

// count paths from source to dest for nxm matrix whixh has 0(blocked cell)
// T- 2^(nxm)

//    i  j
// D  1  0 
// R  0  1
// U -1  0
// L  0 -1
        
        
class GFG {
    
    public static int countpaths(int i, int j,int mat[][], int n,int m, boolean vis[][])
    {
        if(i>=n || j>=m || vis[i][j]==true || mat[i][j]==0) return 0;
        
        if(i==n-1 && j==m-1)  return 1;
        
        vis[i][j]=true;
        int cnt=0;
         int dx[]=new int []{1,0};
         int dy[]=new int[]{0,1};
        
         for(int x=0;x<2;x++)
          cnt+= countpaths(i+dx[x],j+dy[x],mat,n,m,vis);
        vis[i][j]=false;
        return cnt;
    }
	public static void main (String[] args) {
	    int mat[][]= new int [][]{{1,0,1}, {1,1,1},{1,0,1}};
	    System.out.print(countpaths(0,0,mat,3,3,new boolean [3][3]));
	}
}